package com.qa.DDTTest;

import java.io.FileInputStream;
import java.util.Arrays;
import java.util.Collection;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class Para {

	@Parameters
	public static Collection<Object[]> data() {
		FileInputStream file = new FileInputStream("C:\\Users\\Admin\\Downloads\\DemoSiteDDT.xlsx");
		@SuppressWarnings("resource")
		XSSFWorkbook workbook = new XSSFWorkbook(file);
		XSSFSheet sheet = workbook.getSheetAt(0);
		
		for (int rowNum = 0; rowNum < sheet.getPhysicalNumberOfRows(); rowNum++) {
		   	for (int colNum = 0; colNum < sheet.getRow(rowNum).getPhysicalNumberOfCells(); colNum++) {
				XSSFCell cell = sheet.getRow(rowNum).getCell(colNum);
				String userCell = cell.getStringCellValue();
				System.out.println(userCell);
				//assertEquals(“Expected”, userCell);
			}
		}

//		return Arrays.asList(new Object[][] {{1, 2, 3} , { 6, 7, 8 } });
		Object[][] ob = new Object[sheet.getPhysicalNumberOfRows()][sheet.getRow(rowNum).getPhysicalNumberOfCells()];
		
		for (int row = 0; row < sheet.getPhysicalNumberOfRows(); row++) {
		   	for (int column = 0; column < sheet.getRow(row).getPhysicalNumberOfCells(); column++) {
		   		
		   	}
		}
	}
	
	private int x;
	private int y;
	private int z;

	public Para(int x, int y, int z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}

	@Test
	public void test() {
		System.out.println(x + " " + y + " " + z);
	}
}
