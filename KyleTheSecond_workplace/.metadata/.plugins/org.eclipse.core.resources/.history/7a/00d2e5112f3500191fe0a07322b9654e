package mainTest;

import static org.junit.Assert.*;

import org.junit.Ignore;
import org.junit.Test;

import main.Book;
import main.Item;
import main.Magazine;
import main.Map;

public class LibraryTesting {
	@Test @Ignore
	public void uniqueTestBook() {
		Book book = new Book("Sojourn", 6275);
		if (book.getTitle() == null) {
			fail();
		}
	}

	@Test @Ignore
	public void uniqueTestMap() {
		Map map = new Map("England", 354);
		if (map.getLocation() == null) {
			fail();
		}
	}

	@Test @Ignore
	public void uniqueTestMag() {
		Magazine mag = new Magazine("Teenagers", 358);
		if (mag.getDemographic() == null) {
			fail();
		}
	}

	@Test @Ignore
	public void addTest() {
		Item book = new Book("Sojourn", 867);
		assertEquals("Contains no books", true, Item.inventory.contains(book));
	}

	@Test
	public void checkoutTest() {
		Item book = new Book("Homeland", 865);
		Item mag = new Magazine("Teenager", 358);
		Item book3 = new Book("Sojourn", 867);
		mag.checkingOut(358);
		assertEquals("Does not contain book", true, Item.checkedOut.contains(mag));
	}
	
	@Test @Ignore
	public void removeTest() {
		Item book = new Book("Homeland", 865);
		Item book2 = new Book("Exile", 866);
		Item book3 = new Book("Sojourn", 867);
		book2.remove(866);
		assertEquals("Still contains book2", false, Item.inventory.contains(book2));
	}
	
	@Test @Ignore
	public void checkinTest() {
		Item book3 = new Book("Sojourn", 867);
		book3.checkingOut(867);
		book3.checkingIn(867);
		assertEquals("Does not contain Sojourn", true, Item.inventory.contains(book3));
	}
	
	@Test
	public void updateTest() {
		Item book2 = new Book("Sojourn", 866);
		book2.updateItem(866);
		if(book2.inventory.equals("Sojourn")) {
			fail();
		}
	}
}
